name: Release

on:
  # push:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write
      attestations: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: build
      run: |
        set -ex
        python -m pip install build pypi-attestations
        python -m build --sdist --wheel --outdir ./dist/python .

    - name: Generate SLSA attestation for sdist
      id: sdist-attestation
      uses: actions/attest-build-provenance@v3.0.0
      with:
        subject-path: 'dist/python/*.tar.gz'

    - name: Generate SLSA attestation for wheel
      id: wheel-attestation
      uses: actions/attest-build-provenance@v3.0.0
      with:
        subject-path: 'dist/python/*.whl'

    # Convert the SLSA attestations to PyPI attestations and store them in dist/python.
    # Note that gh-action-pypi-publish uses twine to upload artifacts.
    # twine looks for files named "*.*.attestation" in the same directory as the artifact
    # to find the attestation for the artifact.
    # gh-action-pypi-publish itself generates the PyPI attestations using the name
    # *.publish.attestation. SO we use *.slsa.attestation to avoid clashing with the publish
    # ones.
    - name: Convert SLSA attestations to PyPI attestations
      run: |
        set -ex
        pypi-attestations convert --output-file dist/python/$(basename $(ls dist/python/*.tar.gz)).slsa.attestation ${{ steps.sdist-attestation.outputs.bundle-path }}
        pypi-attestations convert --output-file dist/python/$(basename $(ls dist/python/*.whl)).slsa.attestation ${{ steps.wheel-attestation.outputs.bundle-path }}

    # This will upload the sdist and wheel to PyPI, generate the trusted publisher
    # attestation and also atatch the SLSA attestations.
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.13.0
      with:
        packages-dir: dist/python
        repository-url: https://test.pypi.org/legacy/

    - name: Generate git archives
      run: |
        set -ex
        REPO=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        git archive --prefix $REPO-$GITHUB_REF_NAME/ --format=zip --output=dist/$GITHUB_REF_NAME.zip $GITHUB_REF_NAME
        git archive --prefix $REPO-$GITHUB_REF_NAME/ --format=tar.gz --output=dist/$GITHUB_REF_NAME.tar.gz $GITHUB_REF_NAME

    - name: Generate SLSA attestation for git archive zip
      id: git-archive-zip-attestation
      uses: actions/attest-build-provenance@v3.0.0
      with:
        subject-path: 'dist/${{ github.ref_name }}.zip'

    - name: Generate SLSA attestation for git archive tar.gz
      id: git-archive-tar-gz-attestation
      uses: actions/attest-build-provenance@v3.0.0
      with:
        subject-path: 'dist/${{ github.ref_name }}.tar.gz'

    - name: Upload artifacts to release
      run: |
        set -e
        mv -v ${{ steps.sdist-attestation.outputs.bundle-path }} dist/python/$(basename $(ls dist/python/*.tar.gz)).sigstore.json
        mv -v ${{ steps.wheel-attestation.outputs.bundle-path }} dist/python/$(basename $(ls dist/python/*.whl)).sigstore.json
        mv -v ${{ steps.git-archive-zip-attestation.outputs.bundle-path }} dist/$GITHUB_REF_NAME.zip.sigstore.json
        mv -v ${{ steps.git-archive-tar-gz-attestation.outputs.bundle-path }} dist/$GITHUB_REF_NAME.tar.gz.sigstore.json

        # Remove PyPI attestation as it's not needed for the GH release artifacts.
        rm -v dist/python/*.attestation

        set -x
        gh release upload $GITHUB_REF_NAME $(find ./dist -type f)
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
